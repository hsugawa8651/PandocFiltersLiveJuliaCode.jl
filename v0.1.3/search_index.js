var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = PandocFiltersLiveJuliaCode","category":"page"},{"location":"#PandocFiltersLiveJuliaCode","page":"Home","title":"PandocFiltersLiveJuliaCode","text":"","category":"section"},{"location":"#Write-pandoc-filter-in-Julia","page":"Home","title":"Write pandoc filter in Julia","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Example","category":"page"},{"location":"","page":"Home","title":"Home","text":"% pandoc --filter=examples/caps.jl -t markdown examples/sample-caps.txt\nTHIS IS THE CAPS SAMPLE WITH ÄÜÖ.","category":"page"},{"location":"#Library","page":"Home","title":"Library","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [PandocFiltersLiveJuliaCode]","category":"page"},{"location":"#PandocFiltersLiveJuliaCode.PandocFiltersLiveJuliaCode","page":"Home","title":"PandocFiltersLiveJuliaCode.PandocFiltersLiveJuliaCode","text":"PandocFiltersLiveJuliaCode\n\nPackage to aid writing Julia scripts that process the pandoc AST serialized as JSON.\n\n\n\n\n\n","category":"module"},{"location":"#PandocFiltersLiveJuliaCode.AST_filter!-Tuple{Any,Function}","page":"Home","title":"PandocFiltersLiveJuliaCode.AST_filter!","text":"AST_filter!(doc, action::Function, format=\"\")\nAST_filter!(doc, actions::Vector{Function}, format=\"\")\n\nConverts an action or a list of actions into a filter that reads a JSON-formatted pandoc document from stdin, transforms it by walk!ing the tree with the actions, and returns a new JSON-formatted pandoc document to stdout.  The argument is a list of functions action(key, value, format, meta), where key is the type of the pandoc object (e.g. \"Str\", \"Para\"), value is the contents of the object (e.g. a string for \"Str\", a list of inline elements for \"Para\"), format is the target output format (which will be taken for the first command line argument if present), and meta is the document's metadata. If the function returns None, the object to which it applies will remain unchanged.  If it returns an object, the object will be replaced.    If it returns a list, the list will be spliced in to the list to which the target object belongs.    (So, returning an empty list deletes the object.)\n\n\n\n\n\n","category":"method"},{"location":"#PandocFiltersLiveJuliaCode.filter-Tuple{Function}","page":"Home","title":"PandocFiltersLiveJuliaCode.filter","text":"filter!(action::Function)\nfilter!(actions::Vector{Function})\n\nConverts an action or a list of actions into a filter that reads a JSON-formatted pandoc document from stdin, transforms it by walk!ing the tree with the actions, and returns a new JSON-formatted pandoc document to stdout.  The argument is a list of functions action(key, value, format, meta), where key is the type of the pandoc object (e.g. \"Str\", \"Para\"), value is the contents of the object (e.g. a string for \"Str\", a list of inline elements for \"Para\"), format is the target output format (which will be taken for the first command line argument if present), and meta is the document's metadata. If the function returns None, the object to which it applies will remain unchanged.  If it returns an object, the object will be replaced.    If it returns a list, the list will be spliced in to the list to which the target object belongs.    (So, returning an empty list deletes the object.)\n\n\n\n\n\n","category":"method"},{"location":"#PandocFiltersLiveJuliaCode.walk!-Tuple{Any,Function,Any,Any}","page":"Home","title":"PandocFiltersLiveJuliaCode.walk!","text":"walk!(a, action::Function, format, meta)\n\nFunction walk! will walk! Pandoc document abstract source tree (AST) and apply filter function on each element of the document AST. Returns a modified tree.\n\naction must be a function which takes four arguments, tag, content, format, meta,   and should return\n\nnothing to leave the element unchanged\n[] to delete the element\nA Pandoc element to replace the element\nor a list of Pandoc elements which will be spliced into the list the original object belongs to.\n\n\n\n\n\n","category":"method"}]
}
